import os
import json
from copy import deepcopy as deepcopy

# Returns if a baseline system type is zone equipment, single zone air loop, or multizone air loop
def determine_system_classification(system_rmd):
    zones = system_rmd["ruleset_model_instances"][0]["buildings"][0]["building_segments"][0]["zones"]

    if zones[0]["terminals"][0]["is_supply_ducted"]:
        if len(zones) > 1:
            return "MultiZoneAirLoop"
        else:
            return "SingleZoneAirLoop"


    # If not air loop, it's zone equipment
    else:
        return "ZoneEquipment"

def get_zone_capacity_hashes(idf_rmd, system_classification):

    # Initialize capacity hashes
    zone_capacity_total_cool_hash = {}
    zone_capacity_sens_cool_hash = {}
    zone_capacity_heat_hash = {}

    building_segments = idf_rmd["ruleset_model_instances"][0]["buildings"][0]["building_segments"]

    # Initializes all total capacities to 0
    zone_capacity_total_cool_hash["total"] = 0
    zone_capacity_sens_cool_hash["total"] = 0
    zone_capacity_heat_hash["total"] = 0

    # Iterate through each building segment, sum up each zone's capacities
    for building_segment in building_segments:
        hvac_systems = building_segment["heating_ventilating_air_conditioning_systems"]

        for hvac in hvac_systems:
            # Parse HVAC ID for zone name
            zone_name = hvac["id"].split(" ZN")[0] + " ZN"

            zone_capacity_total_cool_hash["total"] += hvac["cooling_system"]["design_total_cool_capacity"]
            zone_capacity_sens_cool_hash["total"] += hvac["cooling_system"]["design_sensible_cool_capacity"]
            zone_capacity_heat_hash["total"] += hvac["heating_system"]["design_capacity"]

            zone_capacity_total_cool_hash[zone_name] = hvac["cooling_system"]["design_total_cool_capacity"]
            zone_capacity_sens_cool_hash[zone_name] = hvac["cooling_system"]["design_sensible_cool_capacity"]
            zone_capacity_heat_hash[zone_name] = hvac["heating_system"]["design_capacity"]

        # Remove HVAC systems generated by IDF to RMD (they only show capacities)
        del building_segment["heating_ventilating_air_conditioning_systems"]




    return zone_capacity_total_cool_hash, zone_capacity_sens_cool_hash, zone_capacity_heat_hash


def add_baseline_terminals(idf_rmd, system_rmd, system_classification, system_name, zcap_total_cool_hash):

    terminal_copy = deepcopy(system_rmd["ruleset_model_instances"][0]["buildings"][0]["building_segments"][0]["zones"][0]["terminals"][0])

    zones = idf_rmd["ruleset_model_instances"][0]["buildings"][0]["building_segments"][0]["zones"]

    zone_count = 0

    for zone in zones:

        zone_count += 1

        # Remove any old terminals
        if "terminals" in zone:

            del zone["terminals"]

        zone_id = zone["id"]

        # Only add HVAC systems to zones with loads (i.e., skip unconditioned zones like attics)
        if zone_id in zcap_total_cool_hash:

            # Inject new terminals
            zone["terminals"] = []
            zone["terminals"].append(deepcopy(terminal_copy))
            zone["terminals"][0]["id"] = f"Terminal {zone_count}"

            if system_classification != "MultiZoneAirLoop":
                zone["terminals"][0]["served_by_heating_ventilating_air_conditioning_system"] = f"{system_name} {zone_id}"

            else:
                zone["terminals"][0]["served_by_heating_ventilating_air_conditioning_system"] = f"{system_name}"


def add_hvac_systems(idf_rmd, system_rmd, system_classification, system_name,
                     zcap_total_cool_hash, zcap_sens_cool_hash, zcap_heat_hash):

    building_segments = idf_rmd["ruleset_model_instances"][0]["buildings"][0]["building_segments"]

    # Copy of baseline system HVAC system
    hvac_copy = deepcopy(system_rmd["ruleset_model_instances"][0]["buildings"][0]["building_segments"][0]["heating_ventilating_air_conditioning_systems"][0])

    hvac_count = 0

    for building_segment in building_segments:

        building_segment["heating_ventilating_air_conditioning_systems"] = []

        # If MZ, only require one HVAC system and assign total capacities
        if system_classification == "MultiZoneAirLoop":

            building_segment["heating_ventilating_air_conditioning_systems"].append(hvac_copy)

            # Adjust capacities
            hvac_system = building_segment["heating_ventilating_air_conditioning_systems"][0]
            hvac_system["id"] = f"{system_name}"
            hvac_system["cooling_system"]["design_total_cool_capacity"] = zcap_total_cool_hash["total"]
            hvac_system["cooling_system"]["design_sensible_cool_capacity"] = zcap_sens_cool_hash["total"]

            if "heating_system" in hvac_system:
                hvac_system["heating_system"]["design_capacity"] = zcap_heat_hash["total"]
            else:
                hvac_system["preheat_system"]["design_capacity"] = zcap_heat_hash["total"]


        # If SZ, add an HVAC system for each zone
        else:

            zones = building_segment["zones"]

            for zone in zones:

                # Get zone ID
                zone_id = zone["id"]

                # Only add HVAC systems to zones with loads (i.e., skip unconditioned zones like attics)
                if zone_id in zcap_total_cool_hash:

                    # Append another HVAC system to building segment for this zone
                    building_segment["heating_ventilating_air_conditioning_systems"].append(deepcopy(hvac_copy))

                    # Update HVAC ID
                    hvac_system = building_segment["heating_ventilating_air_conditioning_systems"][hvac_count]
                    hvac_system["id"] = f"{system_name} {zone_id}"

                    # Update fan system names
                    if "fan_system" in hvac_system:
                        hvac_system["fan_system"]["id"] = f"Fan System - {zone_id}"

                        # Assumes only one supply fan
                        if "supply_fans" in hvac_system["fan_system"]:
                            hvac_system["fan_system"]["supply_fans"][0]["id"] = f"Supply Fan - {zone_id}"

                        # Assumes only one supply fan
                        if "return_fans" in hvac_system["fan_system"]:
                            hvac_system["fan_system"]["return_fans"][0]["id"] = f"Return Fan - {zone_id}"


                    # Set capacities and update heating/cooling system Ids
                    hvac_system["cooling_system"]["design_total_cool_capacity"] = zcap_total_cool_hash[zone_id]
                    hvac_system["cooling_system"]["design_sensible_cool_capacity"] = zcap_sens_cool_hash[zone_id]
                    hvac_system["cooling_system"]["id"] = f"Cooling Sys - {zone_id}"

                    if "heating_system" in hvac_system:
                        hvac_system["heating_system"]["design_capacity"] = zcap_heat_hash[zone_id]
                        hvac_system["heating_system"]["id"] = f"Heating Sys - {zone_id}"
                    else:
                        hvac_system["preheat_system"]["design_capacity"] = zcap_heat_hash[zone_id]
                        hvac_system["preheat_system"]["id"] = f"Preheat Sys - {zone_id}"

                    hvac_count += 1


# Adds plant equipment at ruleset model instance level
def add_plant_loop_equipment(idf_rmd, system_rmd):

    equipment_str_list = ['boilers', 'chillers', 'pumps', 'fluid_loops', 'heat_rejections']

    sys_ruleset_model_instance = system_rmd["ruleset_model_instances"][0]
    idf_ruleset_model_instance = idf_rmd["ruleset_model_instances"][0]

    for equipment in equipment_str_list:

        if equipment in sys_ruleset_model_instance:

            idf_ruleset_model_instance[equipment] = sys_ruleset_model_instance[equipment]


def add_hvac_system_to_rmd(master_rmd, system_rmd, master_name, system_name, output_dir):

    # Classify system
    system_classification = determine_system_classification(system_rmd)

    # Get zone capacities and remove IDF HVAC systems
    zcap_total_cool_hash, zcap_sens_cool_hash, zcap_heat_hash = get_zone_capacity_hashes(master_rmd, system_classification)

    # Adjust terminals
    add_baseline_terminals(master_rmd, system_rmd, system_classification, system_name, zcap_total_cool_hash)

    # Adjust building segment HVACs
    add_hvac_systems(master_rmd, system_rmd, system_classification, system_name,
                     zcap_total_cool_hash, zcap_sens_cool_hash, zcap_heat_hash)

    # Add plant loops
    add_plant_loop_equipment(master_rmd, system_rmd)

    output_file = f"{master_name}_{system_name}.rmd"

    output_path = os.path.join(output_dir, output_file)

    with open(output_path, "w") as completed_rmd:
        completed_rmd.write(json.dumps(master_rmd, indent=4))

    print(f"{system_name} added to {master_name}.rmd and written to {output_dir}")


